#ifndef __callbacks_hpp
#define __callbacks_hpp
#include <string>

// This is *NOT* supposed to be required for C++ code.
// It's fixed in GCC-4.8 in C++11 mode.
#define __STDC_FORMAT_MACROS

#include "syscalls.hpp"

extern "C" {
#include "cpu.h"
}

// weak-defined default empty callbacks for all syscalls
#ifdef TARGET_I386
namespace syscalls {
void register_call_sys_restart_syscall(std::function<void(CPUState*, target_ulong)> callback);
void call_sys_restart_syscall_callback(CPUState* env,target_ulong pc);
void register_call_sys_exit(std::function<void(CPUState*, target_ulong, int32_t)> callback);
void call_sys_exit_callback(CPUState* env,target_ulong pc,int32_t error_code);
void register_call_sys_read(std::function<void(CPUState*, target_ulong, uint32_t, target_ulong, uint32_t)> callback);
void call_sys_read_callback(CPUState* env,target_ulong pc,uint32_t fd,target_ulong buf,uint32_t count);
void register_call_sys_write(std::function<void(CPUState*, target_ulong, uint32_t, target_ulong, uint32_t)> callback);
void call_sys_write_callback(CPUState* env,target_ulong pc,uint32_t fd,target_ulong buf,uint32_t count);
void register_call_sys_open(std::function<void(CPUState*, target_ulong, syscalls::string, int32_t, int32_t)> callback);
void call_sys_open_callback(CPUState* env,target_ulong pc,syscalls::string filename,int32_t flags,int32_t mode);
void register_call_sys_close(std::function<void(CPUState*, target_ulong, uint32_t)> callback);
void call_sys_close_callback(CPUState* env,target_ulong pc,uint32_t fd);
void register_call_sys_waitpid(std::function<void(CPUState*, target_ulong, uint32_t, target_ulong, int32_t)> callback);
void call_sys_waitpid_callback(CPUState* env,target_ulong pc,uint32_t pid,target_ulong stat_addr,int32_t options);
void register_call_sys_creat(std::function<void(CPUState*, target_ulong, syscalls::string, int32_t)> callback);
void call_sys_creat_callback(CPUState* env,target_ulong pc,syscalls::string pathname,int32_t mode);
void register_call_sys_link(std::function<void(CPUState*, target_ulong, syscalls::string, syscalls::string)> callback);
void call_sys_link_callback(CPUState* env,target_ulong pc,syscalls::string oldname,syscalls::string newname);
void register_call_sys_unlink(std::function<void(CPUState*, target_ulong, syscalls::string)> callback);
void call_sys_unlink_callback(CPUState* env,target_ulong pc,syscalls::string pathname);
void register_call_sys_chdir(std::function<void(CPUState*, target_ulong, syscalls::string)> callback);
void call_sys_chdir_callback(CPUState* env,target_ulong pc,syscalls::string filename);
void register_call_sys_time(std::function<void(CPUState*, target_ulong, target_ulong)> callback);
void call_sys_time_callback(CPUState* env,target_ulong pc,target_ulong tloc);
void register_call_sys_mknod(std::function<void(CPUState*, target_ulong, syscalls::string, int32_t, uint32_t)> callback);
void call_sys_mknod_callback(CPUState* env,target_ulong pc,syscalls::string filename,int32_t mode,uint32_t dev);
void register_call_sys_chmod(std::function<void(CPUState*, target_ulong, syscalls::string, uint32_t)> callback);
void call_sys_chmod_callback(CPUState* env,target_ulong pc,syscalls::string filename,uint32_t mode);
void register_call_sys_lchown16(std::function<void(CPUState*, target_ulong, syscalls::string, uint32_t, uint32_t)> callback);
void call_sys_lchown16_callback(CPUState* env,target_ulong pc,syscalls::string filename,uint32_t user,uint32_t group);
void register_call_sys_stat(std::function<void(CPUState*, target_ulong, syscalls::string, target_ulong)> callback);
void call_sys_stat_callback(CPUState* env,target_ulong pc,syscalls::string filename,target_ulong statbuf);
void register_call_sys_lseek(std::function<void(CPUState*, target_ulong, uint32_t, uint32_t, uint32_t)> callback);
void call_sys_lseek_callback(CPUState* env,target_ulong pc,uint32_t fd,uint32_t offset,uint32_t origin);
void register_call_sys_getpid(std::function<void(CPUState*, target_ulong)> callback);
void call_sys_getpid_callback(CPUState* env,target_ulong pc);
void register_call_sys_mount(std::function<void(CPUState*, target_ulong, syscalls::string, syscalls::string, syscalls::string, uint32_t, target_ulong)> callback);
void call_sys_mount_callback(CPUState* env,target_ulong pc,syscalls::string dev_name,syscalls::string dir_name,syscalls::string type,uint32_t flags,target_ulong data_arg);
void register_call_sys_oldumount(std::function<void(CPUState*, target_ulong, syscalls::string)> callback);
void call_sys_oldumount_callback(CPUState* env,target_ulong pc,syscalls::string name);
void register_call_sys_setuid16(std::function<void(CPUState*, target_ulong, uint32_t)> callback);
void call_sys_setuid16_callback(CPUState* env,target_ulong pc,uint32_t uid);
void register_call_sys_getuid16(std::function<void(CPUState*, target_ulong)> callback);
void call_sys_getuid16_callback(CPUState* env,target_ulong pc);
void register_call_sys_stime(std::function<void(CPUState*, target_ulong, target_ulong)> callback);
void call_sys_stime_callback(CPUState* env,target_ulong pc,target_ulong tptr);
void register_call_sys_ptrace(std::function<void(CPUState*, target_ulong, int32_t, int32_t, uint32_t, uint32_t)> callback);
void call_sys_ptrace_callback(CPUState* env,target_ulong pc,int32_t request,int32_t pid,uint32_t addr,uint32_t data_arg);
void register_call_sys_alarm(std::function<void(CPUState*, target_ulong, uint32_t)> callback);
void call_sys_alarm_callback(CPUState* env,target_ulong pc,uint32_t seconds);
void register_call_sys_fstat(std::function<void(CPUState*, target_ulong, uint32_t, target_ulong)> callback);
void call_sys_fstat_callback(CPUState* env,target_ulong pc,uint32_t fd,target_ulong statbuf);
void register_call_sys_pause(std::function<void(CPUState*, target_ulong)> callback);
void call_sys_pause_callback(CPUState* env,target_ulong pc);
void register_call_sys_utime(std::function<void(CPUState*, target_ulong, syscalls::string, target_ulong)> callback);
void call_sys_utime_callback(CPUState* env,target_ulong pc,syscalls::string filename,target_ulong times);
void register_call_sys_access(std::function<void(CPUState*, target_ulong, syscalls::string, int32_t)> callback);
void call_sys_access_callback(CPUState* env,target_ulong pc,syscalls::string filename,int32_t mode);
void register_call_sys_nice(std::function<void(CPUState*, target_ulong, int32_t)> callback);
void call_sys_nice_callback(CPUState* env,target_ulong pc,int32_t increment);
void register_call_sys_sync(std::function<void(CPUState*, target_ulong)> callback);
void call_sys_sync_callback(CPUState* env,target_ulong pc);
void register_call_sys_kill(std::function<void(CPUState*, target_ulong, int32_t, int32_t)> callback);
void call_sys_kill_callback(CPUState* env,target_ulong pc,int32_t pid,int32_t sig);
void register_call_sys_rename(std::function<void(CPUState*, target_ulong, syscalls::string, syscalls::string)> callback);
void call_sys_rename_callback(CPUState* env,target_ulong pc,syscalls::string oldname,syscalls::string newname);
void register_call_sys_mkdir(std::function<void(CPUState*, target_ulong, syscalls::string, int32_t)> callback);
void call_sys_mkdir_callback(CPUState* env,target_ulong pc,syscalls::string pathname,int32_t mode);
void register_call_sys_rmdir(std::function<void(CPUState*, target_ulong, syscalls::string)> callback);
void call_sys_rmdir_callback(CPUState* env,target_ulong pc,syscalls::string pathname);
void register_call_sys_dup(std::function<void(CPUState*, target_ulong, uint32_t)> callback);
void call_sys_dup_callback(CPUState* env,target_ulong pc,uint32_t fildes);
void register_call_sys_pipe(std::function<void(CPUState*, target_ulong, target_ulong)> callback);
void call_sys_pipe_callback(CPUState* env,target_ulong pc,target_ulong fildes);
void register_call_sys_times(std::function<void(CPUState*, target_ulong, target_ulong)> callback);
void call_sys_times_callback(CPUState* env,target_ulong pc,target_ulong tbuf);
void register_call_sys_brk(std::function<void(CPUState*, target_ulong, uint32_t)> callback);
void call_sys_brk_callback(CPUState* env,target_ulong pc,uint32_t brk);
void register_call_sys_setgid16(std::function<void(CPUState*, target_ulong, uint32_t)> callback);
void call_sys_setgid16_callback(CPUState* env,target_ulong pc,uint32_t gid);
void register_call_sys_getgid16(std::function<void(CPUState*, target_ulong)> callback);
void call_sys_getgid16_callback(CPUState* env,target_ulong pc);
void register_call_sys_signal(std::function<void(CPUState*, target_ulong, int32_t, target_ulong)> callback);
void call_sys_signal_callback(CPUState* env,target_ulong pc,int32_t sig,target_ulong handler);
void register_call_sys_geteuid16(std::function<void(CPUState*, target_ulong)> callback);
void call_sys_geteuid16_callback(CPUState* env,target_ulong pc);
void register_call_sys_getegid16(std::function<void(CPUState*, target_ulong)> callback);
void call_sys_getegid16_callback(CPUState* env,target_ulong pc);
void register_call_sys_acct(std::function<void(CPUState*, target_ulong, syscalls::string)> callback);
void call_sys_acct_callback(CPUState* env,target_ulong pc,syscalls::string name);
void register_call_sys_umount(std::function<void(CPUState*, target_ulong, syscalls::string, int32_t)> callback);
void call_sys_umount_callback(CPUState* env,target_ulong pc,syscalls::string name,int32_t flags);
void register_call_sys_ioctl(std::function<void(CPUState*, target_ulong, uint32_t, uint32_t, uint32_t)> callback);
void call_sys_ioctl_callback(CPUState* env,target_ulong pc,uint32_t fd,uint32_t cmd,uint32_t arg);
void register_call_sys_fcntl(std::function<void(CPUState*, target_ulong, uint32_t, uint32_t, uint32_t)> callback);
void call_sys_fcntl_callback(CPUState* env,target_ulong pc,uint32_t fd,uint32_t cmd,uint32_t arg);
void register_call_sys_setpgid(std::function<void(CPUState*, target_ulong, uint32_t, uint32_t)> callback);
void call_sys_setpgid_callback(CPUState* env,target_ulong pc,uint32_t pid,uint32_t pgid);
void register_call_sys_olduname(std::function<void(CPUState*, target_ulong, target_ulong)> callback);
void call_sys_olduname_callback(CPUState* env,target_ulong pc,target_ulong arg0);
void register_call_sys_umask(std::function<void(CPUState*, target_ulong, int32_t)> callback);
void call_sys_umask_callback(CPUState* env,target_ulong pc,int32_t mask);
void register_call_sys_chroot(std::function<void(CPUState*, target_ulong, syscalls::string)> callback);
void call_sys_chroot_callback(CPUState* env,target_ulong pc,syscalls::string filename);
void register_call_sys_ustat(std::function<void(CPUState*, target_ulong, uint32_t, target_ulong)> callback);
void call_sys_ustat_callback(CPUState* env,target_ulong pc,uint32_t dev,target_ulong ubuf);
void register_call_sys_dup2(std::function<void(CPUState*, target_ulong, uint32_t, uint32_t)> callback);
void call_sys_dup2_callback(CPUState* env,target_ulong pc,uint32_t oldfd,uint32_t newfd);
void register_call_sys_getppid(std::function<void(CPUState*, target_ulong)> callback);
void call_sys_getppid_callback(CPUState* env,target_ulong pc);
void register_call_sys_getpgrp(std::function<void(CPUState*, target_ulong)> callback);
void call_sys_getpgrp_callback(CPUState* env,target_ulong pc);
void register_call_sys_setsid(std::function<void(CPUState*, target_ulong)> callback);
void call_sys_setsid_callback(CPUState* env,target_ulong pc);
void register_call_sigaction(std::function<void(CPUState*, target_ulong, int32_t, target_ulong, target_ulong)> callback);
void call_sigaction_callback(CPUState* env,target_ulong pc,int32_t sig,target_ulong act,target_ulong oact);
void register_call_sys_sgetmask(std::function<void(CPUState*, target_ulong)> callback);
void call_sys_sgetmask_callback(CPUState* env,target_ulong pc);
void register_call_sys_ssetmask(std::function<void(CPUState*, target_ulong, int32_t)> callback);
void call_sys_ssetmask_callback(CPUState* env,target_ulong pc,int32_t newmask);
void register_call_sys_setreuid16(std::function<void(CPUState*, target_ulong, uint32_t, uint32_t)> callback);
void call_sys_setreuid16_callback(CPUState* env,target_ulong pc,uint32_t ruid,uint32_t euid);
void register_call_sys_setregid16(std::function<void(CPUState*, target_ulong, uint32_t, uint32_t)> callback);
void call_sys_setregid16_callback(CPUState* env,target_ulong pc,uint32_t rgid,uint32_t egid);
void register_call_sigsuspend(std::function<void(CPUState*, target_ulong, int32_t, uint32_t, uint32_t)> callback);
void call_sigsuspend_callback(CPUState* env,target_ulong pc,int32_t restart,uint32_t oldmask,uint32_t mask);
void register_call_sys_sigpending(std::function<void(CPUState*, target_ulong, target_ulong)> callback);
void call_sys_sigpending_callback(CPUState* env,target_ulong pc,target_ulong set);
void register_call_sys_sethostname(std::function<void(CPUState*, target_ulong, syscalls::string, int32_t)> callback);
void call_sys_sethostname_callback(CPUState* env,target_ulong pc,syscalls::string name,int32_t len);
void register_call_sys_setrlimit(std::function<void(CPUState*, target_ulong, uint32_t, target_ulong)> callback);
void call_sys_setrlimit_callback(CPUState* env,target_ulong pc,uint32_t resource,target_ulong rlim);
void register_call_sys_old_getrlimit(std::function<void(CPUState*, target_ulong, uint32_t, target_ulong)> callback);
void call_sys_old_getrlimit_callback(CPUState* env,target_ulong pc,uint32_t resource,target_ulong rlim);
void register_call_sys_getrusage(std::function<void(CPUState*, target_ulong, int32_t, target_ulong)> callback);
void call_sys_getrusage_callback(CPUState* env,target_ulong pc,int32_t who,target_ulong ru);
void register_call_sys_gettimeofday(std::function<void(CPUState*, target_ulong, target_ulong, target_ulong)> callback);
void call_sys_gettimeofday_callback(CPUState* env,target_ulong pc,target_ulong tv,target_ulong tz);
void register_call_sys_settimeofday(std::function<void(CPUState*, target_ulong, target_ulong, target_ulong)> callback);
void call_sys_settimeofday_callback(CPUState* env,target_ulong pc,target_ulong tv,target_ulong tz);
void register_call_sys_getgroups16(std::function<void(CPUState*, target_ulong, int32_t, target_ulong)> callback);
void call_sys_getgroups16_callback(CPUState* env,target_ulong pc,int32_t gidsetsize,target_ulong grouplist);
void register_call_sys_setgroups16(std::function<void(CPUState*, target_ulong, int32_t, target_ulong)> callback);
void call_sys_setgroups16_callback(CPUState* env,target_ulong pc,int32_t gidsetsize,target_ulong grouplist);
void register_call_sys_old_select(std::function<void(CPUState*, target_ulong, target_ulong)> callback);
void call_sys_old_select_callback(CPUState* env,target_ulong pc,target_ulong arg);
void register_call_sys_symlink(std::function<void(CPUState*, target_ulong, syscalls::string, syscalls::string)> callback);
void call_sys_symlink_callback(CPUState* env,target_ulong pc,syscalls::string old,syscalls::string anew);
void register_call_sys_lstat(std::function<void(CPUState*, target_ulong, syscalls::string, target_ulong)> callback);
void call_sys_lstat_callback(CPUState* env,target_ulong pc,syscalls::string filename,target_ulong statbuf);
void register_call_sys_readlink(std::function<void(CPUState*, target_ulong, syscalls::string, target_ulong, int32_t)> callback);
void call_sys_readlink_callback(CPUState* env,target_ulong pc,syscalls::string path,target_ulong buf,int32_t bufsiz);
void register_call_sys_uselib(std::function<void(CPUState*, target_ulong, syscalls::string)> callback);
void call_sys_uselib_callback(CPUState* env,target_ulong pc,syscalls::string library);
void register_call_sys_swapon(std::function<void(CPUState*, target_ulong, syscalls::string, int32_t)> callback);
void call_sys_swapon_callback(CPUState* env,target_ulong pc,syscalls::string specialfile,int32_t swap_flags);
void register_call_sys_reboot(std::function<void(CPUState*, target_ulong, int32_t, int32_t, uint32_t, target_ulong)> callback);
void call_sys_reboot_callback(CPUState* env,target_ulong pc,int32_t magic1,int32_t magic2,uint32_t cmd,target_ulong arg);
void register_call_sys_old_readdir(std::function<void(CPUState*, target_ulong, uint32_t, target_ulong, uint32_t)> callback);
void call_sys_old_readdir_callback(CPUState* env,target_ulong pc,uint32_t arg0,target_ulong arg1,uint32_t arg2);
void register_call_sys_old_mmap(std::function<void(CPUState*, target_ulong, target_ulong)> callback);
void call_sys_old_mmap_callback(CPUState* env,target_ulong pc,target_ulong arg);
void register_call_sys_munmap(std::function<void(CPUState*, target_ulong, uint32_t, uint32_t)> callback);
void call_sys_munmap_callback(CPUState* env,target_ulong pc,uint32_t addr,uint32_t len);
void register_call_sys_truncate(std::function<void(CPUState*, target_ulong, syscalls::string, int32_t)> callback);
void call_sys_truncate_callback(CPUState* env,target_ulong pc,syscalls::string path,int32_t length);
void register_call_sys_ftruncate(std::function<void(CPUState*, target_ulong, uint32_t, uint32_t)> callback);
void call_sys_ftruncate_callback(CPUState* env,target_ulong pc,uint32_t fd,uint32_t length);
void register_call_sys_fchmod(std::function<void(CPUState*, target_ulong, uint32_t, uint32_t)> callback);
void call_sys_fchmod_callback(CPUState* env,target_ulong pc,uint32_t fd,uint32_t mode);
void register_call_sys_fchown16(std::function<void(CPUState*, target_ulong, uint32_t, uint32_t, uint32_t)> callback);
void call_sys_fchown16_callback(CPUState* env,target_ulong pc,uint32_t fd,uint32_t user,uint32_t group);
void register_call_sys_getpriority(std::function<void(CPUState*, target_ulong, int32_t, int32_t)> callback);
void call_sys_getpriority_callback(CPUState* env,target_ulong pc,int32_t which,int32_t who);
void register_call_sys_setpriority(std::function<void(CPUState*, target_ulong, int32_t, int32_t, int32_t)> callback);
void call_sys_setpriority_callback(CPUState* env,target_ulong pc,int32_t which,int32_t who,int32_t niceval);
void register_call_sys_statfs(std::function<void(CPUState*, target_ulong, syscalls::string, target_ulong)> callback);
void call_sys_statfs_callback(CPUState* env,target_ulong pc,syscalls::string path,target_ulong buf);
void register_call_sys_fstatfs(std::function<void(CPUState*, target_ulong, uint32_t, target_ulong)> callback);
void call_sys_fstatfs_callback(CPUState* env,target_ulong pc,uint32_t fd,target_ulong buf);
void register_call_sys_ioperm(std::function<void(CPUState*, target_ulong, uint32_t, uint32_t, int32_t)> callback);
void call_sys_ioperm_callback(CPUState* env,target_ulong pc,uint32_t from,uint32_t num,int32_t on);
void register_call_sys_socketcall(std::function<void(CPUState*, target_ulong, int32_t, target_ulong)> callback);
void call_sys_socketcall_callback(CPUState* env,target_ulong pc,int32_t call,target_ulong args);
void register_call_sys_syslog(std::function<void(CPUState*, target_ulong, int32_t, target_ulong, int32_t)> callback);
void call_sys_syslog_callback(CPUState* env,target_ulong pc,int32_t type,target_ulong buf,int32_t len);
void register_call_sys_setitimer(std::function<void(CPUState*, target_ulong, int32_t, target_ulong, target_ulong)> callback);
void call_sys_setitimer_callback(CPUState* env,target_ulong pc,int32_t which,target_ulong value,target_ulong ovalue);
void register_call_sys_getitimer(std::function<void(CPUState*, target_ulong, int32_t, target_ulong)> callback);
void call_sys_getitimer_callback(CPUState* env,target_ulong pc,int32_t which,target_ulong value);
void register_call_sys_newstat(std::function<void(CPUState*, target_ulong, syscalls::string, target_ulong)> callback);
void call_sys_newstat_callback(CPUState* env,target_ulong pc,syscalls::string filename,target_ulong statbuf);
void register_call_sys_newlstat(std::function<void(CPUState*, target_ulong, syscalls::string, target_ulong)> callback);
void call_sys_newlstat_callback(CPUState* env,target_ulong pc,syscalls::string filename,target_ulong statbuf);
void register_call_sys_newfstat(std::function<void(CPUState*, target_ulong, uint32_t, target_ulong)> callback);
void call_sys_newfstat_callback(CPUState* env,target_ulong pc,uint32_t fd,target_ulong statbuf);
void register_call_sys_uname(std::function<void(CPUState*, target_ulong, target_ulong)> callback);
void call_sys_uname_callback(CPUState* env,target_ulong pc,target_ulong arg0);
void register_call_sys_vhangup(std::function<void(CPUState*, target_ulong)> callback);
void call_sys_vhangup_callback(CPUState* env,target_ulong pc);
void register_call_sys_wait4(std::function<void(CPUState*, target_ulong, uint32_t, target_ulong, int32_t, target_ulong)> callback);
void call_sys_wait4_callback(CPUState* env,target_ulong pc,uint32_t pid,target_ulong stat_addr,int32_t options,target_ulong ru);
void register_call_sys_swapoff(std::function<void(CPUState*, target_ulong, syscalls::string)> callback);
void call_sys_swapoff_callback(CPUState* env,target_ulong pc,syscalls::string specialfile);
void register_call_sys_sysinfo(std::function<void(CPUState*, target_ulong, target_ulong)> callback);
void call_sys_sysinfo_callback(CPUState* env,target_ulong pc,target_ulong info);
void register_call_sys_ipc(std::function<void(CPUState*, target_ulong, uint32_t, int32_t, uint32_t, uint32_t, target_ulong, int32_t)> callback);
void call_sys_ipc_callback(CPUState* env,target_ulong pc,uint32_t call,int32_t first,uint32_t second,uint32_t third,target_ulong ptr,int32_t fifth);
void register_call_sys_fsync(std::function<void(CPUState*, target_ulong, uint32_t)> callback);
void call_sys_fsync_callback(CPUState* env,target_ulong pc,uint32_t fd);
void register_call_sys_setdomainname(std::function<void(CPUState*, target_ulong, syscalls::string, int32_t)> callback);
void call_sys_setdomainname_callback(CPUState* env,target_ulong pc,syscalls::string name,int32_t len);
void register_call_sys_newuname(std::function<void(CPUState*, target_ulong, target_ulong)> callback);
void call_sys_newuname_callback(CPUState* env,target_ulong pc,target_ulong name);
void register_call_sys_adjtimex(std::function<void(CPUState*, target_ulong, target_ulong)> callback);
void call_sys_adjtimex_callback(CPUState* env,target_ulong pc,target_ulong txc_p);
void register_call_sys_mprotect(std::function<void(CPUState*, target_ulong, uint32_t, uint32_t, uint32_t)> callback);
void call_sys_mprotect_callback(CPUState* env,target_ulong pc,uint32_t start,uint32_t len,uint32_t prot);
void register_call_sys_sigprocmask(std::function<void(CPUState*, target_ulong, int32_t, target_ulong, target_ulong)> callback);
void call_sys_sigprocmask_callback(CPUState* env,target_ulong pc,int32_t how,target_ulong set,target_ulong oset);
void register_call_sys_init_module(std::function<void(CPUState*, target_ulong, target_ulong, uint32_t, syscalls::string)> callback);
void call_sys_init_module_callback(CPUState* env,target_ulong pc,target_ulong umod,uint32_t len,syscalls::string uargs);
void register_call_sys_delete_module(std::function<void(CPUState*, target_ulong, syscalls::string, uint32_t)> callback);
void call_sys_delete_module_callback(CPUState* env,target_ulong pc,syscalls::string name_user,uint32_t flags);
void register_call_sys_quotactl(std::function<void(CPUState*, target_ulong, uint32_t, syscalls::string, uint32_t, target_ulong)> callback);
void call_sys_quotactl_callback(CPUState* env,target_ulong pc,uint32_t cmd,syscalls::string special,uint32_t id,target_ulong addr);
void register_call_sys_getpgid(std::function<void(CPUState*, target_ulong, uint32_t)> callback);
void call_sys_getpgid_callback(CPUState* env,target_ulong pc,uint32_t pid);
void register_call_sys_fchdir(std::function<void(CPUState*, target_ulong, uint32_t)> callback);
void call_sys_fchdir_callback(CPUState* env,target_ulong pc,uint32_t fd);
void register_call_sys_bdflush(std::function<void(CPUState*, target_ulong, int32_t, int32_t)> callback);
void call_sys_bdflush_callback(CPUState* env,target_ulong pc,int32_t func,int32_t data_arg);
void register_call_sys_sysfs(std::function<void(CPUState*, target_ulong, int32_t, uint32_t, uint32_t)> callback);
void call_sys_sysfs_callback(CPUState* env,target_ulong pc,int32_t option,uint32_t arg1,uint32_t arg2);
void register_call_sys_personality(std::function<void(CPUState*, target_ulong, uint32_t)> callback);
void call_sys_personality_callback(CPUState* env,target_ulong pc,uint32_t personality);
void register_call_sys_setfsuid16(std::function<void(CPUState*, target_ulong, uint32_t)> callback);
void call_sys_setfsuid16_callback(CPUState* env,target_ulong pc,uint32_t uid);
void register_call_sys_setfsgid16(std::function<void(CPUState*, target_ulong, uint32_t)> callback);
void call_sys_setfsgid16_callback(CPUState* env,target_ulong pc,uint32_t gid);
void register_call_sys_llseek(std::function<void(CPUState*, target_ulong, uint32_t, uint32_t, uint32_t, target_ulong, uint32_t)> callback);
void call_sys_llseek_callback(CPUState* env,target_ulong pc,uint32_t fd,uint32_t offset_high,uint32_t offset_low,target_ulong result,uint32_t origin);
void register_call_sys_getdents(std::function<void(CPUState*, target_ulong, uint32_t, target_ulong, uint32_t)> callback);
void call_sys_getdents_callback(CPUState* env,target_ulong pc,uint32_t fd,target_ulong dirent,uint32_t count);
void register_call_sys_select(std::function<void(CPUState*, target_ulong, int32_t, target_ulong, target_ulong, target_ulong, target_ulong)> callback);
void call_sys_select_callback(CPUState* env,target_ulong pc,int32_t n,target_ulong inp,target_ulong outp,target_ulong exp,target_ulong tvp);
void register_call_sys_flock(std::function<void(CPUState*, target_ulong, uint32_t, uint32_t)> callback);
void call_sys_flock_callback(CPUState* env,target_ulong pc,uint32_t fd,uint32_t cmd);
void register_call_sys_msync(std::function<void(CPUState*, target_ulong, uint32_t, uint32_t, int32_t)> callback);
void call_sys_msync_callback(CPUState* env,target_ulong pc,uint32_t start,uint32_t len,int32_t flags);
void register_call_sys_readv(std::function<void(CPUState*, target_ulong, uint32_t, target_ulong, uint32_t)> callback);
void call_sys_readv_callback(CPUState* env,target_ulong pc,uint32_t fd,target_ulong vec,uint32_t vlen);
void register_call_sys_writev(std::function<void(CPUState*, target_ulong, uint32_t, target_ulong, uint32_t)> callback);
void call_sys_writev_callback(CPUState* env,target_ulong pc,uint32_t fd,target_ulong vec,uint32_t vlen);
void register_call_sys_getsid(std::function<void(CPUState*, target_ulong, uint32_t)> callback);
void call_sys_getsid_callback(CPUState* env,target_ulong pc,uint32_t pid);
void register_call_sys_fdatasync(std::function<void(CPUState*, target_ulong, uint32_t)> callback);
void call_sys_fdatasync_callback(CPUState* env,target_ulong pc,uint32_t fd);
void register_call_sys_sysctl(std::function<void(CPUState*, target_ulong, target_ulong)> callback);
void call_sys_sysctl_callback(CPUState* env,target_ulong pc,target_ulong args);
void register_call_sys_mlock(std::function<void(CPUState*, target_ulong, uint32_t, uint32_t)> callback);
void call_sys_mlock_callback(CPUState* env,target_ulong pc,uint32_t start,uint32_t len);
void register_call_sys_munlock(std::function<void(CPUState*, target_ulong, uint32_t, uint32_t)> callback);
void call_sys_munlock_callback(CPUState* env,target_ulong pc,uint32_t start,uint32_t len);
void register_call_sys_mlockall(std::function<void(CPUState*, target_ulong, int32_t)> callback);
void call_sys_mlockall_callback(CPUState* env,target_ulong pc,int32_t flags);
void register_call_sys_munlockall(std::function<void(CPUState*, target_ulong)> callback);
void call_sys_munlockall_callback(CPUState* env,target_ulong pc);
void register_call_sys_sched_setparam(std::function<void(CPUState*, target_ulong, uint32_t, target_ulong)> callback);
void call_sys_sched_setparam_callback(CPUState* env,target_ulong pc,uint32_t pid,target_ulong param);
void register_call_sys_sched_getparam(std::function<void(CPUState*, target_ulong, uint32_t, target_ulong)> callback);
void call_sys_sched_getparam_callback(CPUState* env,target_ulong pc,uint32_t pid,target_ulong param);
void register_call_sys_sched_setscheduler(std::function<void(CPUState*, target_ulong, uint32_t, int32_t, target_ulong)> callback);
void call_sys_sched_setscheduler_callback(CPUState* env,target_ulong pc,uint32_t pid,int32_t policy,target_ulong param);
void register_call_sys_sched_getscheduler(std::function<void(CPUState*, target_ulong, uint32_t)> callback);
void call_sys_sched_getscheduler_callback(CPUState* env,target_ulong pc,uint32_t pid);
void register_call_sys_sched_yield(std::function<void(CPUState*, target_ulong)> callback);
void call_sys_sched_yield_callback(CPUState* env,target_ulong pc);
void register_call_sys_sched_get_priority_max(std::function<void(CPUState*, target_ulong, int32_t)> callback);
void call_sys_sched_get_priority_max_callback(CPUState* env,target_ulong pc,int32_t policy);
void register_call_sys_sched_get_priority_min(std::function<void(CPUState*, target_ulong, int32_t)> callback);
void call_sys_sched_get_priority_min_callback(CPUState* env,target_ulong pc,int32_t policy);
void register_call_sys_sched_rr_get_interval(std::function<void(CPUState*, target_ulong, uint32_t, target_ulong)> callback);
void call_sys_sched_rr_get_interval_callback(CPUState* env,target_ulong pc,uint32_t pid,target_ulong interval);
void register_call_sys_nanosleep(std::function<void(CPUState*, target_ulong, target_ulong, target_ulong)> callback);
void call_sys_nanosleep_callback(CPUState* env,target_ulong pc,target_ulong rqtp,target_ulong rmtp);
void register_call_sys_mremap(std::function<void(CPUState*, target_ulong, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t)> callback);
void call_sys_mremap_callback(CPUState* env,target_ulong pc,uint32_t addr,uint32_t old_len,uint32_t new_len,uint32_t flags,uint32_t new_addr);
void register_call_sys_setresuid16(std::function<void(CPUState*, target_ulong, uint32_t, uint32_t, uint32_t)> callback);
void call_sys_setresuid16_callback(CPUState* env,target_ulong pc,uint32_t ruid,uint32_t euid,uint32_t suid);
void register_call_sys_getresuid16(std::function<void(CPUState*, target_ulong, target_ulong, target_ulong, target_ulong)> callback);
void call_sys_getresuid16_callback(CPUState* env,target_ulong pc,target_ulong ruid,target_ulong euid,target_ulong suid);
void register_call_sys_poll(std::function<void(CPUState*, target_ulong, target_ulong, uint32_t, int32_t)> callback);
void call_sys_poll_callback(CPUState* env,target_ulong pc,target_ulong ufds,uint32_t nfds,int32_t timeout);
void register_call_sys_setresgid16(std::function<void(CPUState*, target_ulong, uint32_t, uint32_t, uint32_t)> callback);
void call_sys_setresgid16_callback(CPUState* env,target_ulong pc,uint32_t rgid,uint32_t egid,uint32_t sgid);
void register_call_sys_getresgid16(std::function<void(CPUState*, target_ulong, target_ulong, target_ulong, target_ulong)> callback);
void call_sys_getresgid16_callback(CPUState* env,target_ulong pc,target_ulong rgid,target_ulong egid,target_ulong sgid);
void register_call_sys_prctl(std::function<void(CPUState*, target_ulong, int32_t, uint32_t, uint32_t, uint32_t, uint32_t)> callback);
void call_sys_prctl_callback(CPUState* env,target_ulong pc,int32_t option,uint32_t arg2,uint32_t arg3,uint32_t arg4,uint32_t arg5);
void register_call_rt_sigaction(std::function<void(CPUState*, target_ulong, int32_t, target_ulong, target_ulong, uint32_t)> callback);
void call_rt_sigaction_callback(CPUState* env,target_ulong pc,int32_t sig,target_ulong act,target_ulong oact,uint32_t sigsetsize);
void register_call_sys_rt_sigprocmask(std::function<void(CPUState*, target_ulong, int32_t, target_ulong, target_ulong, uint32_t)> callback);
void call_sys_rt_sigprocmask_callback(CPUState* env,target_ulong pc,int32_t how,target_ulong set,target_ulong oset,uint32_t sigsetsize);
void register_call_sys_rt_sigpending(std::function<void(CPUState*, target_ulong, target_ulong, uint32_t)> callback);
void call_sys_rt_sigpending_callback(CPUState* env,target_ulong pc,target_ulong set,uint32_t sigsetsize);
void register_call_sys_rt_sigtimedwait(std::function<void(CPUState*, target_ulong, target_ulong, target_ulong, target_ulong, uint32_t)> callback);
void call_sys_rt_sigtimedwait_callback(CPUState* env,target_ulong pc,target_ulong uthese,target_ulong uinfo,target_ulong uts,uint32_t sigsetsize);
void register_call_sys_rt_sigqueueinfo(std::function<void(CPUState*, target_ulong, int32_t, int32_t, target_ulong)> callback);
void call_sys_rt_sigqueueinfo_callback(CPUState* env,target_ulong pc,int32_t pid,int32_t sig,target_ulong uinfo);
void register_call_sys_rt_sigsuspend(std::function<void(CPUState*, target_ulong, target_ulong, uint32_t)> callback);
void call_sys_rt_sigsuspend_callback(CPUState* env,target_ulong pc,target_ulong unewset,uint32_t sigsetsize);
void register_call_sys_pread64(std::function<void(CPUState*, target_ulong, uint32_t, target_ulong, uint32_t, uint64_t)> callback);
void call_sys_pread64_callback(CPUState* env,target_ulong pc,uint32_t fd,target_ulong buf,uint32_t count,uint64_t pos);
void register_call_sys_pwrite64(std::function<void(CPUState*, target_ulong, uint32_t, target_ulong, uint32_t, uint64_t)> callback);
void call_sys_pwrite64_callback(CPUState* env,target_ulong pc,uint32_t fd,target_ulong buf,uint32_t count,uint64_t pos);
void register_call_sys_chown16(std::function<void(CPUState*, target_ulong, syscalls::string, uint32_t, uint32_t)> callback);
void call_sys_chown16_callback(CPUState* env,target_ulong pc,syscalls::string filename,uint32_t user,uint32_t group);
void register_call_sys_getcwd(std::function<void(CPUState*, target_ulong, target_ulong, uint32_t)> callback);
void call_sys_getcwd_callback(CPUState* env,target_ulong pc,target_ulong buf,uint32_t size);
void register_call_sys_capget(std::function<void(CPUState*, target_ulong, target_ulong, target_ulong)> callback);
void call_sys_capget_callback(CPUState* env,target_ulong pc,target_ulong header,target_ulong dataptr);
void register_call_sys_capset(std::function<void(CPUState*, target_ulong, target_ulong, target_ulong)> callback);
void call_sys_capset_callback(CPUState* env,target_ulong pc,target_ulong header,target_ulong data_arg);
void register_call_sys_sendfile(std::function<void(CPUState*, target_ulong, int32_t, int32_t, target_ulong, uint32_t)> callback);
void call_sys_sendfile_callback(CPUState* env,target_ulong pc,int32_t out_fd,int32_t in_fd,target_ulong offset,uint32_t count);
void register_call_sys_getrlimit(std::function<void(CPUState*, target_ulong, uint32_t, target_ulong)> callback);
void call_sys_getrlimit_callback(CPUState* env,target_ulong pc,uint32_t resource,target_ulong rlim);
void register_call_sys_mmap_pgoff(std::function<void(CPUState*, target_ulong, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t)> callback);
void call_sys_mmap_pgoff_callback(CPUState* env,target_ulong pc,uint32_t addr,uint32_t len,uint32_t prot,uint32_t flags,uint32_t fd,uint32_t pgoff);
void register_call_sys_truncate64(std::function<void(CPUState*, target_ulong, syscalls::string, uint64_t)> callback);
void call_sys_truncate64_callback(CPUState* env,target_ulong pc,syscalls::string path,uint64_t length);
void register_call_sys_ftruncate64(std::function<void(CPUState*, target_ulong, uint32_t, uint64_t)> callback);
void call_sys_ftruncate64_callback(CPUState* env,target_ulong pc,uint32_t fd,uint64_t length);
void register_call_sys_stat64(std::function<void(CPUState*, target_ulong, syscalls::string, target_ulong)> callback);
void call_sys_stat64_callback(CPUState* env,target_ulong pc,syscalls::string filename,target_ulong statbuf);
void register_call_sys_lstat64(std::function<void(CPUState*, target_ulong, syscalls::string, target_ulong)> callback);
void call_sys_lstat64_callback(CPUState* env,target_ulong pc,syscalls::string filename,target_ulong statbuf);
void register_call_sys_fstat64(std::function<void(CPUState*, target_ulong, uint32_t, target_ulong)> callback);
void call_sys_fstat64_callback(CPUState* env,target_ulong pc,uint32_t fd,target_ulong statbuf);
void register_call_sys_lchown(std::function<void(CPUState*, target_ulong, syscalls::string, uint32_t, uint32_t)> callback);
void call_sys_lchown_callback(CPUState* env,target_ulong pc,syscalls::string filename,uint32_t user,uint32_t group);
void register_call_sys_getuid(std::function<void(CPUState*, target_ulong)> callback);
void call_sys_getuid_callback(CPUState* env,target_ulong pc);
void register_call_sys_getgid(std::function<void(CPUState*, target_ulong)> callback);
void call_sys_getgid_callback(CPUState* env,target_ulong pc);
void register_call_sys_geteuid(std::function<void(CPUState*, target_ulong)> callback);
void call_sys_geteuid_callback(CPUState* env,target_ulong pc);
void register_call_sys_getegid(std::function<void(CPUState*, target_ulong)> callback);
void call_sys_getegid_callback(CPUState* env,target_ulong pc);
void register_call_sys_setreuid(std::function<void(CPUState*, target_ulong, uint32_t, uint32_t)> callback);
void call_sys_setreuid_callback(CPUState* env,target_ulong pc,uint32_t ruid,uint32_t euid);
void register_call_sys_setregid(std::function<void(CPUState*, target_ulong, uint32_t, uint32_t)> callback);
void call_sys_setregid_callback(CPUState* env,target_ulong pc,uint32_t rgid,uint32_t egid);
void register_call_sys_getgroups(std::function<void(CPUState*, target_ulong, int32_t, target_ulong)> callback);
void call_sys_getgroups_callback(CPUState* env,target_ulong pc,int32_t gidsetsize,target_ulong grouplist);
void register_call_sys_setgroups(std::function<void(CPUState*, target_ulong, int32_t, target_ulong)> callback);
void call_sys_setgroups_callback(CPUState* env,target_ulong pc,int32_t gidsetsize,target_ulong grouplist);
void register_call_sys_fchown(std::function<void(CPUState*, target_ulong, uint32_t, uint32_t, uint32_t)> callback);
void call_sys_fchown_callback(CPUState* env,target_ulong pc,uint32_t fd,uint32_t user,uint32_t group);
void register_call_sys_setresuid(std::function<void(CPUState*, target_ulong, uint32_t, uint32_t, uint32_t)> callback);
void call_sys_setresuid_callback(CPUState* env,target_ulong pc,uint32_t ruid,uint32_t euid,uint32_t suid);
void register_call_sys_getresuid(std::function<void(CPUState*, target_ulong, target_ulong, target_ulong, target_ulong)> callback);
void call_sys_getresuid_callback(CPUState* env,target_ulong pc,target_ulong ruid,target_ulong euid,target_ulong suid);
void register_call_sys_setresgid(std::function<void(CPUState*, target_ulong, uint32_t, uint32_t, uint32_t)> callback);
void call_sys_setresgid_callback(CPUState* env,target_ulong pc,uint32_t rgid,uint32_t egid,uint32_t sgid);
void register_call_sys_getresgid(std::function<void(CPUState*, target_ulong, target_ulong, target_ulong, target_ulong)> callback);
void call_sys_getresgid_callback(CPUState* env,target_ulong pc,target_ulong rgid,target_ulong egid,target_ulong sgid);
void register_call_sys_chown(std::function<void(CPUState*, target_ulong, syscalls::string, uint32_t, uint32_t)> callback);
void call_sys_chown_callback(CPUState* env,target_ulong pc,syscalls::string filename,uint32_t user,uint32_t group);
void register_call_sys_setuid(std::function<void(CPUState*, target_ulong, uint32_t)> callback);
void call_sys_setuid_callback(CPUState* env,target_ulong pc,uint32_t uid);
void register_call_sys_setgid(std::function<void(CPUState*, target_ulong, uint32_t)> callback);
void call_sys_setgid_callback(CPUState* env,target_ulong pc,uint32_t gid);
void register_call_sys_setfsuid(std::function<void(CPUState*, target_ulong, uint32_t)> callback);
void call_sys_setfsuid_callback(CPUState* env,target_ulong pc,uint32_t uid);
void register_call_sys_setfsgid(std::function<void(CPUState*, target_ulong, uint32_t)> callback);
void call_sys_setfsgid_callback(CPUState* env,target_ulong pc,uint32_t gid);
void register_call_sys_pivot_root(std::function<void(CPUState*, target_ulong, syscalls::string, syscalls::string)> callback);
void call_sys_pivot_root_callback(CPUState* env,target_ulong pc,syscalls::string new_root,syscalls::string put_old);
void register_call_sys_mincore(std::function<void(CPUState*, target_ulong, uint32_t, uint32_t, syscalls::string)> callback);
void call_sys_mincore_callback(CPUState* env,target_ulong pc,uint32_t start,uint32_t len,syscalls::string vec);
void register_call_sys_madvise(std::function<void(CPUState*, target_ulong, uint32_t, uint32_t, int32_t)> callback);
void call_sys_madvise_callback(CPUState* env,target_ulong pc,uint32_t start,uint32_t len,int32_t behavior);
void register_call_sys_getdents64(std::function<void(CPUState*, target_ulong, uint32_t, target_ulong, uint32_t)> callback);
void call_sys_getdents64_callback(CPUState* env,target_ulong pc,uint32_t fd,target_ulong dirent,uint32_t count);
void register_call_sys_fcntl64(std::function<void(CPUState*, target_ulong, uint32_t, uint32_t, uint32_t)> callback);
void call_sys_fcntl64_callback(CPUState* env,target_ulong pc,uint32_t fd,uint32_t cmd,uint32_t arg);
void register_call_sys_gettid(std::function<void(CPUState*, target_ulong)> callback);
void call_sys_gettid_callback(CPUState* env,target_ulong pc);
void register_call_sys_readahead(std::function<void(CPUState*, target_ulong, int32_t, uint64_t, uint32_t)> callback);
void call_sys_readahead_callback(CPUState* env,target_ulong pc,int32_t fd,uint64_t offset,uint32_t count);
void register_call_sys_setxattr(std::function<void(CPUState*, target_ulong, syscalls::string, syscalls::string, target_ulong, uint32_t, int32_t)> callback);
void call_sys_setxattr_callback(CPUState* env,target_ulong pc,syscalls::string path,syscalls::string name,target_ulong value,uint32_t size,int32_t flags);
void register_call_sys_lsetxattr(std::function<void(CPUState*, target_ulong, syscalls::string, syscalls::string, target_ulong, uint32_t, int32_t)> callback);
void call_sys_lsetxattr_callback(CPUState* env,target_ulong pc,syscalls::string path,syscalls::string name,target_ulong value,uint32_t size,int32_t flags);
void register_call_sys_fsetxattr(std::function<void(CPUState*, target_ulong, int32_t, syscalls::string, target_ulong, uint32_t, int32_t)> callback);
void call_sys_fsetxattr_callback(CPUState* env,target_ulong pc,int32_t fd,syscalls::string name,target_ulong value,uint32_t size,int32_t flags);
void register_call_sys_getxattr(std::function<void(CPUState*, target_ulong, syscalls::string, syscalls::string, target_ulong, uint32_t)> callback);
void call_sys_getxattr_callback(CPUState* env,target_ulong pc,syscalls::string path,syscalls::string name,target_ulong value,uint32_t size);
void register_call_sys_lgetxattr(std::function<void(CPUState*, target_ulong, syscalls::string, syscalls::string, target_ulong, uint32_t)> callback);
void call_sys_lgetxattr_callback(CPUState* env,target_ulong pc,syscalls::string path,syscalls::string name,target_ulong value,uint32_t size);
void register_call_sys_fgetxattr(std::function<void(CPUState*, target_ulong, int32_t, syscalls::string, target_ulong, uint32_t)> callback);
void call_sys_fgetxattr_callback(CPUState* env,target_ulong pc,int32_t fd,syscalls::string name,target_ulong value,uint32_t size);
void register_call_sys_listxattr(std::function<void(CPUState*, target_ulong, syscalls::string, syscalls::string, uint32_t)> callback);
void call_sys_listxattr_callback(CPUState* env,target_ulong pc,syscalls::string path,syscalls::string list,uint32_t size);
void register_call_sys_llistxattr(std::function<void(CPUState*, target_ulong, syscalls::string, syscalls::string, uint32_t)> callback);
void call_sys_llistxattr_callback(CPUState* env,target_ulong pc,syscalls::string path,syscalls::string list,uint32_t size);
void register_call_sys_flistxattr(std::function<void(CPUState*, target_ulong, int32_t, syscalls::string, uint32_t)> callback);
void call_sys_flistxattr_callback(CPUState* env,target_ulong pc,int32_t fd,syscalls::string list,uint32_t size);
void register_call_sys_removexattr(std::function<void(CPUState*, target_ulong, syscalls::string, syscalls::string)> callback);
void call_sys_removexattr_callback(CPUState* env,target_ulong pc,syscalls::string path,syscalls::string name);
void register_call_sys_lremovexattr(std::function<void(CPUState*, target_ulong, syscalls::string, syscalls::string)> callback);
void call_sys_lremovexattr_callback(CPUState* env,target_ulong pc,syscalls::string path,syscalls::string name);
void register_call_sys_fremovexattr(std::function<void(CPUState*, target_ulong, int32_t, syscalls::string)> callback);
void call_sys_fremovexattr_callback(CPUState* env,target_ulong pc,int32_t fd,syscalls::string name);
void register_call_sys_tkill(std::function<void(CPUState*, target_ulong, int32_t, int32_t)> callback);
void call_sys_tkill_callback(CPUState* env,target_ulong pc,int32_t pid,int32_t sig);
void register_call_sys_sendfile64(std::function<void(CPUState*, target_ulong, int32_t, int32_t, target_ulong, uint32_t)> callback);
void call_sys_sendfile64_callback(CPUState* env,target_ulong pc,int32_t out_fd,int32_t in_fd,target_ulong offset,uint32_t count);
void register_call_sys_futex(std::function<void(CPUState*, target_ulong, target_ulong, int32_t, uint32_t, target_ulong, target_ulong, uint32_t)> callback);
void call_sys_futex_callback(CPUState* env,target_ulong pc,target_ulong uaddr,int32_t op,uint32_t val,target_ulong utime,target_ulong uaddr2,uint32_t val3);
void register_call_sys_sched_setaffinity(std::function<void(CPUState*, target_ulong, uint32_t, uint32_t, target_ulong)> callback);
void call_sys_sched_setaffinity_callback(CPUState* env,target_ulong pc,uint32_t pid,uint32_t len,target_ulong user_mask_ptr);
void register_call_sys_sched_getaffinity(std::function<void(CPUState*, target_ulong, uint32_t, uint32_t, target_ulong)> callback);
void call_sys_sched_getaffinity_callback(CPUState* env,target_ulong pc,uint32_t pid,uint32_t len,target_ulong user_mask_ptr);
void register_call_sys_io_setup(std::function<void(CPUState*, target_ulong, uint32_t, target_ulong)> callback);
void call_sys_io_setup_callback(CPUState* env,target_ulong pc,uint32_t nr_reqs,target_ulong ctx);
void register_call_sys_io_destroy(std::function<void(CPUState*, target_ulong, uint32_t)> callback);
void call_sys_io_destroy_callback(CPUState* env,target_ulong pc,uint32_t ctx);
void register_call_sys_io_getevents(std::function<void(CPUState*, target_ulong, uint32_t, int32_t, int32_t, target_ulong, target_ulong)> callback);
void call_sys_io_getevents_callback(CPUState* env,target_ulong pc,uint32_t ctx_id,int32_t min_nr,int32_t nr,target_ulong events,target_ulong timeout);
void register_call_sys_io_submit(std::function<void(CPUState*, target_ulong, uint32_t, int32_t, target_ulong)> callback);
void call_sys_io_submit_callback(CPUState* env,target_ulong pc,uint32_t arg0,int32_t arg1,target_ulong arg2);
void register_call_sys_io_cancel(std::function<void(CPUState*, target_ulong, uint32_t, target_ulong, target_ulong)> callback);
void call_sys_io_cancel_callback(CPUState* env,target_ulong pc,uint32_t ctx_id,target_ulong iocb,target_ulong result);
void register_call_sys_fadvise64(std::function<void(CPUState*, target_ulong, int32_t, uint64_t, uint32_t, int32_t)> callback);
void call_sys_fadvise64_callback(CPUState* env,target_ulong pc,int32_t fd,uint64_t offset,uint32_t len,int32_t advice);
void register_call_sys_exit_group(std::function<void(CPUState*, target_ulong, int32_t)> callback);
void call_sys_exit_group_callback(CPUState* env,target_ulong pc,int32_t error_code);
void register_call_sys_lookup_dcookie(std::function<void(CPUState*, target_ulong, uint64_t, target_ulong, uint32_t)> callback);
void call_sys_lookup_dcookie_callback(CPUState* env,target_ulong pc,uint64_t cookie64,target_ulong buf,uint32_t len);
void register_call_sys_epoll_create(std::function<void(CPUState*, target_ulong, int32_t)> callback);
void call_sys_epoll_create_callback(CPUState* env,target_ulong pc,int32_t size);
void register_call_sys_epoll_ctl(std::function<void(CPUState*, target_ulong, int32_t, int32_t, int32_t, target_ulong)> callback);
void call_sys_epoll_ctl_callback(CPUState* env,target_ulong pc,int32_t epfd,int32_t op,int32_t fd,target_ulong event);
void register_call_sys_epoll_wait(std::function<void(CPUState*, target_ulong, int32_t, target_ulong, int32_t, int32_t)> callback);
void call_sys_epoll_wait_callback(CPUState* env,target_ulong pc,int32_t epfd,target_ulong events,int32_t maxevents,int32_t timeout);
void register_call_sys_remap_file_pages(std::function<void(CPUState*, target_ulong, uint32_t, uint32_t, uint32_t, uint32_t, uint32_t)> callback);
void call_sys_remap_file_pages_callback(CPUState* env,target_ulong pc,uint32_t start,uint32_t size,uint32_t prot,uint32_t pgoff,uint32_t flags);
void register_call_sys_set_tid_address(std::function<void(CPUState*, target_ulong, target_ulong)> callback);
void call_sys_set_tid_address_callback(CPUState* env,target_ulong pc,target_ulong tidptr);
void register_call_sys_timer_create(std::function<void(CPUState*, target_ulong, uint32_t, target_ulong, target_ulong)> callback);
void call_sys_timer_create_callback(CPUState* env,target_ulong pc,uint32_t which_clock,target_ulong timer_event_spec,target_ulong created_timer_id);
void register_call_sys_timer_settime(std::function<void(CPUState*, target_ulong, uint32_t, int32_t, target_ulong, target_ulong)> callback);
void call_sys_timer_settime_callback(CPUState* env,target_ulong pc,uint32_t timer_id,int32_t flags,target_ulong new_setting,target_ulong old_setting);
void register_call_sys_timer_gettime(std::function<void(CPUState*, target_ulong, uint32_t, target_ulong)> callback);
void call_sys_timer_gettime_callback(CPUState* env,target_ulong pc,uint32_t timer_id,target_ulong setting);
void register_call_sys_timer_getoverrun(std::function<void(CPUState*, target_ulong, uint32_t)> callback);
void call_sys_timer_getoverrun_callback(CPUState* env,target_ulong pc,uint32_t timer_id);
void register_call_sys_timer_delete(std::function<void(CPUState*, target_ulong, uint32_t)> callback);
void call_sys_timer_delete_callback(CPUState* env,target_ulong pc,uint32_t timer_id);
void register_call_sys_clock_settime(std::function<void(CPUState*, target_ulong, uint32_t, target_ulong)> callback);
void call_sys_clock_settime_callback(CPUState* env,target_ulong pc,uint32_t which_clock,target_ulong tp);
void register_call_sys_clock_gettime(std::function<void(CPUState*, target_ulong, uint32_t, target_ulong)> callback);
void call_sys_clock_gettime_callback(CPUState* env,target_ulong pc,uint32_t which_clock,target_ulong tp);
void register_call_sys_clock_getres(std::function<void(CPUState*, target_ulong, uint32_t, target_ulong)> callback);
void call_sys_clock_getres_callback(CPUState* env,target_ulong pc,uint32_t which_clock,target_ulong tp);
void register_call_sys_clock_nanosleep(std::function<void(CPUState*, target_ulong, uint32_t, int32_t, target_ulong, target_ulong)> callback);
void call_sys_clock_nanosleep_callback(CPUState* env,target_ulong pc,uint32_t which_clock,int32_t flags,target_ulong rqtp,target_ulong rmtp);
void register_call_sys_statfs64(std::function<void(CPUState*, target_ulong, syscalls::string, uint32_t, target_ulong)> callback);
void call_sys_statfs64_callback(CPUState* env,target_ulong pc,syscalls::string path,uint32_t sz,target_ulong buf);
void register_call_sys_fstatfs64(std::function<void(CPUState*, target_ulong, uint32_t, uint32_t, target_ulong)> callback);
void call_sys_fstatfs64_callback(CPUState* env,target_ulong pc,uint32_t fd,uint32_t sz,target_ulong buf);
void register_call_sys_tgkill(std::function<void(CPUState*, target_ulong, int32_t, int32_t, int32_t)> callback);
void call_sys_tgkill_callback(CPUState* env,target_ulong pc,int32_t tgid,int32_t pid,int32_t sig);
void register_call_sys_utimes(std::function<void(CPUState*, target_ulong, syscalls::string, target_ulong)> callback);
void call_sys_utimes_callback(CPUState* env,target_ulong pc,syscalls::string filename,target_ulong utimes);
void register_call_sys_fadvise64_64(std::function<void(CPUState*, target_ulong, int32_t, uint64_t, uint64_t, int32_t)> callback);
void call_sys_fadvise64_64_callback(CPUState* env,target_ulong pc,int32_t fd,uint64_t offset,uint64_t len,int32_t advice);
void register_call_sys_mbind(std::function<void(CPUState*, target_ulong, uint32_t, uint32_t, uint32_t, target_ulong, uint32_t, uint32_t)> callback);
void call_sys_mbind_callback(CPUState* env,target_ulong pc,uint32_t start,uint32_t len,uint32_t mode,target_ulong nmask,uint32_t maxnode,uint32_t flags);
void register_call_sys_get_mempolicy(std::function<void(CPUState*, target_ulong, target_ulong, target_ulong, uint32_t, uint32_t, uint32_t)> callback);
void call_sys_get_mempolicy_callback(CPUState* env,target_ulong pc,target_ulong policy,target_ulong nmask,uint32_t maxnode,uint32_t addr,uint32_t flags);
void register_call_sys_set_mempolicy(std::function<void(CPUState*, target_ulong, int32_t, target_ulong, uint32_t)> callback);
void call_sys_set_mempolicy_callback(CPUState* env,target_ulong pc,int32_t mode,target_ulong nmask,uint32_t maxnode);
void register_call_sys_mq_open(std::function<void(CPUState*, target_ulong, syscalls::string, int32_t, uint32_t, target_ulong)> callback);
void call_sys_mq_open_callback(CPUState* env,target_ulong pc,syscalls::string name,int32_t oflag,uint32_t mode,target_ulong attr);
void register_call_sys_mq_unlink(std::function<void(CPUState*, target_ulong, syscalls::string)> callback);
void call_sys_mq_unlink_callback(CPUState* env,target_ulong pc,syscalls::string name);
void register_call_sys_mq_timedsend(std::function<void(CPUState*, target_ulong, uint32_t, syscalls::string, uint32_t, uint32_t, target_ulong)> callback);
void call_sys_mq_timedsend_callback(CPUState* env,target_ulong pc,uint32_t mqdes,syscalls::string msg_ptr,uint32_t msg_len,uint32_t msg_prio,target_ulong abs_timeout);
void register_call_sys_mq_timedreceive(std::function<void(CPUState*, target_ulong, uint32_t, syscalls::string, uint32_t, target_ulong, target_ulong)> callback);
void call_sys_mq_timedreceive_callback(CPUState* env,target_ulong pc,uint32_t mqdes,syscalls::string msg_ptr,uint32_t msg_len,target_ulong msg_prio,target_ulong abs_timeout);
void register_call_sys_mq_notify(std::function<void(CPUState*, target_ulong, uint32_t, target_ulong)> callback);
void call_sys_mq_notify_callback(CPUState* env,target_ulong pc,uint32_t mqdes,target_ulong notification);
void register_call_sys_mq_getsetattr(std::function<void(CPUState*, target_ulong, uint32_t, target_ulong, target_ulong)> callback);
void call_sys_mq_getsetattr_callback(CPUState* env,target_ulong pc,uint32_t mqdes,target_ulong mqstat,target_ulong omqstat);
void register_call_sys_kexec_load(std::function<void(CPUState*, target_ulong, uint32_t, uint32_t, target_ulong, uint32_t)> callback);
void call_sys_kexec_load_callback(CPUState* env,target_ulong pc,uint32_t entry,uint32_t nr_segments,target_ulong segments,uint32_t flags);
void register_call_sys_waitid(std::function<void(CPUState*, target_ulong, int32_t, uint32_t, target_ulong, int32_t, target_ulong)> callback);
void call_sys_waitid_callback(CPUState* env,target_ulong pc,int32_t which,uint32_t pid,target_ulong infop,int32_t options,target_ulong ru);
void register_call_sys_add_key(std::function<void(CPUState*, target_ulong, syscalls::string, syscalls::string, target_ulong, uint32_t, uint32_t)> callback);
void call_sys_add_key_callback(CPUState* env,target_ulong pc,syscalls::string _type,syscalls::string _description,target_ulong _payload,uint32_t plen,uint32_t destringid);
void register_call_sys_request_key(std::function<void(CPUState*, target_ulong, syscalls::string, syscalls::string, syscalls::string, uint32_t)> callback);
void call_sys_request_key_callback(CPUState* env,target_ulong pc,syscalls::string _type,syscalls::string _description,syscalls::string _callout_info,uint32_t destringid);
void register_call_sys_keyctl(std::function<void(CPUState*, target_ulong, int32_t, uint32_t, uint32_t, uint32_t, uint32_t)> callback);
void call_sys_keyctl_callback(CPUState* env,target_ulong pc,int32_t cmd,uint32_t arg2,uint32_t arg3,uint32_t arg4,uint32_t arg5);
void register_call_sys_ioprio_set(std::function<void(CPUState*, target_ulong, int32_t, int32_t, int32_t)> callback);
void call_sys_ioprio_set_callback(CPUState* env,target_ulong pc,int32_t which,int32_t who,int32_t ioprio);
void register_call_sys_ioprio_get(std::function<void(CPUState*, target_ulong, int32_t, int32_t)> callback);
void call_sys_ioprio_get_callback(CPUState* env,target_ulong pc,int32_t which,int32_t who);
void register_call_sys_inotify_init(std::function<void(CPUState*, target_ulong)> callback);
void call_sys_inotify_init_callback(CPUState* env,target_ulong pc);
void register_call_sys_inotify_add_watch(std::function<void(CPUState*, target_ulong, int32_t, syscalls::string, uint32_t)> callback);
void call_sys_inotify_add_watch_callback(CPUState* env,target_ulong pc,int32_t fd,syscalls::string path,uint32_t mask);
void register_call_sys_inotify_rm_watch(std::function<void(CPUState*, target_ulong, int32_t, int32_t)> callback);
void call_sys_inotify_rm_watch_callback(CPUState* env,target_ulong pc,int32_t fd,int32_t wd);
void register_call_sys_migrate_pages(std::function<void(CPUState*, target_ulong, uint32_t, uint32_t, target_ulong, target_ulong)> callback);
void call_sys_migrate_pages_callback(CPUState* env,target_ulong pc,uint32_t pid,uint32_t maxnode,target_ulong from,target_ulong to);
void register_call_sys_openat(std::function<void(CPUState*, target_ulong, int32_t, syscalls::string, int32_t, int32_t)> callback);
void call_sys_openat_callback(CPUState* env,target_ulong pc,int32_t dfd,syscalls::string filename,int32_t flags,int32_t mode);
void register_call_sys_mkdirat(std::function<void(CPUState*, target_ulong, int32_t, syscalls::string, int32_t)> callback);
void call_sys_mkdirat_callback(CPUState* env,target_ulong pc,int32_t dfd,syscalls::string pathname,int32_t mode);
void register_call_sys_mknodat(std::function<void(CPUState*, target_ulong, int32_t, syscalls::string, int32_t, uint32_t)> callback);
void call_sys_mknodat_callback(CPUState* env,target_ulong pc,int32_t dfd,syscalls::string filename,int32_t mode,uint32_t dev);
void register_call_sys_fchownat(std::function<void(CPUState*, target_ulong, int32_t, syscalls::string, uint32_t, uint32_t, int32_t)> callback);
void call_sys_fchownat_callback(CPUState* env,target_ulong pc,int32_t dfd,syscalls::string filename,uint32_t user,uint32_t group,int32_t flag);
void register_call_sys_futimesat(std::function<void(CPUState*, target_ulong, int32_t, syscalls::string, target_ulong)> callback);
void call_sys_futimesat_callback(CPUState* env,target_ulong pc,int32_t dfd,syscalls::string filename,target_ulong utimes);
void register_call_sys_fstatat64(std::function<void(CPUState*, target_ulong, int32_t, syscalls::string, target_ulong, int32_t)> callback);
void call_sys_fstatat64_callback(CPUState* env,target_ulong pc,int32_t dfd,syscalls::string filename,target_ulong statbuf,int32_t flag);
void register_call_sys_unlinkat(std::function<void(CPUState*, target_ulong, int32_t, syscalls::string, int32_t)> callback);
void call_sys_unlinkat_callback(CPUState* env,target_ulong pc,int32_t dfd,syscalls::string pathname,int32_t flag);
void register_call_sys_renameat(std::function<void(CPUState*, target_ulong, int32_t, syscalls::string, int32_t, syscalls::string)> callback);
void call_sys_renameat_callback(CPUState* env,target_ulong pc,int32_t olddfd,syscalls::string oldname,int32_t newdfd,syscalls::string newname);
void register_call_sys_linkat(std::function<void(CPUState*, target_ulong, int32_t, syscalls::string, int32_t, syscalls::string, int32_t)> callback);
void call_sys_linkat_callback(CPUState* env,target_ulong pc,int32_t olddfd,syscalls::string oldname,int32_t newdfd,syscalls::string newname,int32_t flags);
void register_call_sys_symlinkat(std::function<void(CPUState*, target_ulong, syscalls::string, int32_t, syscalls::string)> callback);
void call_sys_symlinkat_callback(CPUState* env,target_ulong pc,syscalls::string oldname,int32_t newdfd,syscalls::string newname);
void register_call_sys_readlinkat(std::function<void(CPUState*, target_ulong, int32_t, syscalls::string, target_ulong, int32_t)> callback);
void call_sys_readlinkat_callback(CPUState* env,target_ulong pc,int32_t dfd,syscalls::string path,target_ulong buf,int32_t bufsiz);
void register_call_sys_fchmodat(std::function<void(CPUState*, target_ulong, int32_t, syscalls::string, uint32_t)> callback);
void call_sys_fchmodat_callback(CPUState* env,target_ulong pc,int32_t dfd,syscalls::string filename,uint32_t mode);
void register_call_sys_faccessat(std::function<void(CPUState*, target_ulong, int32_t, syscalls::string, int32_t)> callback);
void call_sys_faccessat_callback(CPUState* env,target_ulong pc,int32_t dfd,syscalls::string filename,int32_t mode);
void register_call_sys_pselect6(std::function<void(CPUState*, target_ulong, int32_t, target_ulong, target_ulong, target_ulong, target_ulong, target_ulong)> callback);
void call_sys_pselect6_callback(CPUState* env,target_ulong pc,int32_t arg0,target_ulong arg1,target_ulong arg2,target_ulong arg3,target_ulong arg4,target_ulong arg5);
void register_call_sys_ppoll(std::function<void(CPUState*, target_ulong, target_ulong, uint32_t, target_ulong, target_ulong, uint32_t)> callback);
void call_sys_ppoll_callback(CPUState* env,target_ulong pc,target_ulong arg0,uint32_t arg1,target_ulong arg2,target_ulong arg3,uint32_t arg4);
void register_call_sys_unshare(std::function<void(CPUState*, target_ulong, uint32_t)> callback);
void call_sys_unshare_callback(CPUState* env,target_ulong pc,uint32_t unshare_flags);
void register_call_sys_set_robust_list(std::function<void(CPUState*, target_ulong, target_ulong, uint32_t)> callback);
void call_sys_set_robust_list_callback(CPUState* env,target_ulong pc,target_ulong head,uint32_t len);
void register_call_sys_get_robust_list(std::function<void(CPUState*, target_ulong, int32_t, target_ulong, target_ulong)> callback);
void call_sys_get_robust_list_callback(CPUState* env,target_ulong pc,int32_t pid,target_ulong head_ptr,target_ulong len_ptr);
void register_call_sys_splice(std::function<void(CPUState*, target_ulong, int32_t, target_ulong, int32_t, target_ulong, uint32_t, uint32_t)> callback);
void call_sys_splice_callback(CPUState* env,target_ulong pc,int32_t fd_in,target_ulong off_in,int32_t fd_out,target_ulong off_out,uint32_t len,uint32_t flags);
void register_call_sys_sync_file_range(std::function<void(CPUState*, target_ulong, int32_t, uint64_t, uint64_t, uint32_t)> callback);
void call_sys_sync_file_range_callback(CPUState* env,target_ulong pc,int32_t fd,uint64_t offset,uint64_t nbytes,uint32_t flags);
void register_call_sys_tee(std::function<void(CPUState*, target_ulong, int32_t, int32_t, uint32_t, uint32_t)> callback);
void call_sys_tee_callback(CPUState* env,target_ulong pc,int32_t fdin,int32_t fdout,uint32_t len,uint32_t flags);
void register_call_sys_vmsplice(std::function<void(CPUState*, target_ulong, int32_t, target_ulong, uint32_t, uint32_t)> callback);
void call_sys_vmsplice_callback(CPUState* env,target_ulong pc,int32_t fd,target_ulong iov,uint32_t nr_segs,uint32_t flags);
void register_call_sys_move_pages(std::function<void(CPUState*, target_ulong, uint32_t, uint32_t, target_ulong, target_ulong, target_ulong, int32_t)> callback);
void call_sys_move_pages_callback(CPUState* env,target_ulong pc,uint32_t pid,uint32_t nr_pages,target_ulong pages,target_ulong nodes,target_ulong status,int32_t flags);
void register_call_sys_getcpu(std::function<void(CPUState*, target_ulong, target_ulong, target_ulong, target_ulong)> callback);
void call_sys_getcpu_callback(CPUState* env,target_ulong pc,target_ulong cpu,target_ulong node,target_ulong cache);
void register_call_sys_epoll_pwait(std::function<void(CPUState*, target_ulong, int32_t, target_ulong, int32_t, int32_t, target_ulong, uint32_t)> callback);
void call_sys_epoll_pwait_callback(CPUState* env,target_ulong pc,int32_t epfd,target_ulong events,int32_t maxevents,int32_t timeout,target_ulong sigmask,uint32_t sigsetsize);
void register_call_sys_utimensat(std::function<void(CPUState*, target_ulong, int32_t, syscalls::string, target_ulong, int32_t)> callback);
void call_sys_utimensat_callback(CPUState* env,target_ulong pc,int32_t dfd,syscalls::string filename,target_ulong utimes,int32_t flags);
void register_call_sys_signalfd(std::function<void(CPUState*, target_ulong, int32_t, target_ulong, uint32_t)> callback);
void call_sys_signalfd_callback(CPUState* env,target_ulong pc,int32_t ufd,target_ulong user_mask,uint32_t sizemask);
void register_call_sys_timerfd_create(std::function<void(CPUState*, target_ulong, int32_t, int32_t)> callback);
void call_sys_timerfd_create_callback(CPUState* env,target_ulong pc,int32_t clockid,int32_t flags);
void register_call_sys_eventfd(std::function<void(CPUState*, target_ulong, uint32_t)> callback);
void call_sys_eventfd_callback(CPUState* env,target_ulong pc,uint32_t count);
void register_call_sys_fallocate(std::function<void(CPUState*, target_ulong, int32_t, int32_t, uint64_t, uint64_t)> callback);
void call_sys_fallocate_callback(CPUState* env,target_ulong pc,int32_t fd,int32_t mode,uint64_t offset,uint64_t len);
void register_call_sys_timerfd_settime(std::function<void(CPUState*, target_ulong, int32_t, int32_t, target_ulong, target_ulong)> callback);
void call_sys_timerfd_settime_callback(CPUState* env,target_ulong pc,int32_t ufd,int32_t flags,target_ulong utmr,target_ulong otmr);
void register_call_sys_timerfd_gettime(std::function<void(CPUState*, target_ulong, int32_t, target_ulong)> callback);
void call_sys_timerfd_gettime_callback(CPUState* env,target_ulong pc,int32_t ufd,target_ulong otmr);
void register_call_sys_signalfd4(std::function<void(CPUState*, target_ulong, int32_t, target_ulong, uint32_t, int32_t)> callback);
void call_sys_signalfd4_callback(CPUState* env,target_ulong pc,int32_t ufd,target_ulong user_mask,uint32_t sizemask,int32_t flags);
void register_call_sys_eventfd2(std::function<void(CPUState*, target_ulong, uint32_t, int32_t)> callback);
void call_sys_eventfd2_callback(CPUState* env,target_ulong pc,uint32_t count,int32_t flags);
void register_call_sys_epoll_create1(std::function<void(CPUState*, target_ulong, int32_t)> callback);
void call_sys_epoll_create1_callback(CPUState* env,target_ulong pc,int32_t flags);
void register_call_sys_dup3(std::function<void(CPUState*, target_ulong, uint32_t, uint32_t, int32_t)> callback);
void call_sys_dup3_callback(CPUState* env,target_ulong pc,uint32_t oldfd,uint32_t newfd,int32_t flags);
void register_call_sys_pipe2(std::function<void(CPUState*, target_ulong, target_ulong, int32_t)> callback);
void call_sys_pipe2_callback(CPUState* env,target_ulong pc,target_ulong fildes,int32_t flags);
void register_call_sys_inotify_init1(std::function<void(CPUState*, target_ulong, int32_t)> callback);
void call_sys_inotify_init1_callback(CPUState* env,target_ulong pc,int32_t flags);
void register_call_sys_preadv(std::function<void(CPUState*, target_ulong, uint32_t, target_ulong, uint32_t, uint32_t, uint32_t)> callback);
void call_sys_preadv_callback(CPUState* env,target_ulong pc,uint32_t fd,target_ulong vec,uint32_t vlen,uint32_t pos_l,uint32_t pos_h);
void register_call_sys_pwritev(std::function<void(CPUState*, target_ulong, uint32_t, target_ulong, uint32_t, uint32_t, uint32_t)> callback);
void call_sys_pwritev_callback(CPUState* env,target_ulong pc,uint32_t fd,target_ulong vec,uint32_t vlen,uint32_t pos_l,uint32_t pos_h);
void register_call_sys_rt_tgsigqueueinfo(std::function<void(CPUState*, target_ulong, uint32_t, uint32_t, int32_t, target_ulong)> callback);
void call_sys_rt_tgsigqueueinfo_callback(CPUState* env,target_ulong pc,uint32_t tgid,uint32_t pid,int32_t sig,target_ulong uinfo);
void register_call_sys_perf_event_open(std::function<void(CPUState*, target_ulong, target_ulong, uint32_t, int32_t, int32_t, uint32_t)> callback);
void call_sys_perf_event_open_callback(CPUState* env,target_ulong pc,target_ulong attr_uptr,uint32_t pid,int32_t cpu,int32_t group_fd,uint32_t flags);
void register_call_sys_recvmmsg(std::function<void(CPUState*, target_ulong, int32_t, target_ulong, uint32_t, uint32_t, target_ulong)> callback);
void call_sys_recvmmsg_callback(CPUState* env,target_ulong pc,int32_t fd,target_ulong msg,uint32_t vlen,uint32_t flags,target_ulong timeout);
void register_call_sys_fanotify_init(std::function<void(CPUState*, target_ulong, uint32_t, uint32_t)> callback);
void call_sys_fanotify_init_callback(CPUState* env,target_ulong pc,uint32_t flags,uint32_t event_f_flags);
void register_call_sys_fanotify_mark(std::function<void(CPUState*, target_ulong, int32_t, uint32_t, uint64_t, int32_t, syscalls::string)> callback);
void call_sys_fanotify_mark_callback(CPUState* env,target_ulong pc,int32_t fanotify_fd,uint32_t flags,uint64_t mask,int32_t fd,syscalls::string pathname);
void register_call_sys_prlimit64(std::function<void(CPUState*, target_ulong, uint32_t, uint32_t, target_ulong, target_ulong)> callback);
void call_sys_prlimit64_callback(CPUState* env,target_ulong pc,uint32_t pid,uint32_t resource,target_ulong new_rlim,target_ulong old_rlim);
void register_call_sys_name_to_handle_at(std::function<void(CPUState*, target_ulong, int32_t, syscalls::string, target_ulong, target_ulong, int32_t)> callback);
void call_sys_name_to_handle_at_callback(CPUState* env,target_ulong pc,int32_t dfd,syscalls::string name,target_ulong handle,target_ulong mnt_id,int32_t flag);
void register_call_sys_open_by_handle_at(std::function<void(CPUState*, target_ulong, int32_t, target_ulong, int32_t)> callback);
void call_sys_open_by_handle_at_callback(CPUState* env,target_ulong pc,int32_t mountdirfd,target_ulong handle,int32_t flags);
void register_call_sys_clock_adjtime(std::function<void(CPUState*, target_ulong, uint32_t, target_ulong)> callback);
void call_sys_clock_adjtime_callback(CPUState* env,target_ulong pc,uint32_t which_clock,target_ulong tx);
void register_call_sys_syncfs(std::function<void(CPUState*, target_ulong, int32_t)> callback);
void call_sys_syncfs_callback(CPUState* env,target_ulong pc,int32_t fd);
void register_call_sys_sendmmsg(std::function<void(CPUState*, target_ulong, int32_t, target_ulong, uint32_t, uint32_t)> callback);
void call_sys_sendmmsg_callback(CPUState* env,target_ulong pc,int32_t fd,target_ulong msg,uint32_t vlen,uint32_t flags);
void register_call_sys_setns(std::function<void(CPUState*, target_ulong, int32_t, int32_t)> callback);
void call_sys_setns_callback(CPUState* env,target_ulong pc,int32_t fd,int32_t nstype);
void register_call_sys_process_vm_readv(std::function<void(CPUState*, target_ulong, uint32_t, target_ulong, uint32_t, target_ulong, uint32_t, uint32_t)> callback);
void call_sys_process_vm_readv_callback(CPUState* env,target_ulong pc,uint32_t pid,target_ulong lvec,uint32_t liovcnt,target_ulong rvec,uint32_t riovcnt,uint32_t flags);
void register_call_sys_process_vm_writev(std::function<void(CPUState*, target_ulong, uint32_t, target_ulong, uint32_t, target_ulong, uint32_t, uint32_t)> callback);
void call_sys_process_vm_writev_callback(CPUState* env,target_ulong pc,uint32_t pid,target_ulong lvec,uint32_t liovcnt,target_ulong rvec,uint32_t riovcnt,uint32_t flags);
} //namespace syscalls
#endif
#endif //__callbacks_hpp
